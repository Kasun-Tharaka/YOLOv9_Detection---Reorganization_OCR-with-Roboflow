# -*- coding: utf-8 -*-
"""Automatic_number_plate_recognition_(ANPR)_with_Yolov9_and_EasyOCR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13c7vszXAahM7OoUSXxc5erSkWPhUdcHq

data: https://universe.roboflow.com/arvind-kumar-wjygd/anpr2-syxl7
"""

# befor run the code, check the runtime GPU selected as T4
!nvidia-smi

# keep models and dataset home directry its esay to manage
import os
HOME = os.getcwd()
print(HOME)

"""YOLOv9 is very new. At the moment, we recommend using a fork of the main repository. The `detect.py` script contains a bug that prevents inference. This bug is patched in the fork."""

# Commented out IPython magic to ensure Python compatibility.
# clone the yolo and install requirements yolo9 repositry
!git clone https://github.com/SkalskiP/yolov9.git
# %cd yolov9
!pip install -r requirements.txt -q

# install roboflow package to download dataset from roboflow univers
!pip install -q roboflow

# download some pretrained models from yolov9 repositry
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-c.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-e.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/gelan-c.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/gelan-e.pt

# listdown the downloaded model
!ls -la {HOME}/weights

"""The dataset must be saved inside the `{HOME}/yolov9` directory, otherwise, the training will not succeed."""

# Commented out IPython magic to ensure Python compatibility.
# redirect to the yolov9 folder to download and keep the dataset
# %cd {HOME}/yolov9

# this roboflow dataset is already annotated
# go to the dataset and select type of data and get the code and paste here
!pip install roboflow

import roboflow

roboflow.login()

rf = roboflow.Roboflow()

project = rf.workspace("arvind-kumar-wjygd").project("anpr2-syxl7")
version = project.version(8)
dataset = version.download("yolov9")

# Commented out IPython magic to ensure Python compatibility.
# start the train run the train.py
# you can change parameters here epochs, device(GPU) etc.
# provide the data yaml and select the model which need to finetune

# %cd {HOME}/yolov9

!python train.py \
--batch 16 --epochs 25 --img 640 --device 0 --min-items 0 --close-mosaic 15 \
--data {dataset.location}/data.yaml \
--weights {HOME}/weights/gelan-c.pt \
--cfg models/detect/gelan-c.yaml \
--hyp hyp.scratch-high.yaml

"""After completed runing, inside run folder we can see weights and metrices about the model"""

# these are the file generated inside after training
!ls {HOME}/yolov9/runs/train/exp/

# lets plot some metrics
from IPython.display import Image

Image(filename=f"{HOME}/yolov9/runs/train/exp/results.png", width=1000)

from IPython.display import Image

Image(filename=f"{HOME}/yolov9/runs/train/exp/confusion_matrix.png", width=1000)

# lets see some batch images
from IPython.display import Image

Image(filename=f"{HOME}/yolov9/runs/train/exp/val_batch0_pred.jpg", width=1000)

# Commented out IPython magic to ensure Python compatibility.
# lets validate the custom model top of the test data.here use the best.pt model
# t validate run val.py inside this all the code written

# %cd {HOME}/yolov9

!python val.py \
--img 640 --batch 32 --conf 0.001 --iou 0.7 --device 0 \
--data {dataset.location}/data.yaml \
--weights {HOME}/yolov9/runs/train/exp/weights/best.pt

# lets detect the test data using best.pt model
# just run detect.py file inside that all the code written(load model, visualize, etc)

!python detect.py \
--img 1280 --conf 0.1 --device 0 \
--weights {HOME}/yolov9/runs/train/exp/weights/best.pt \
--source {dataset.location}/test/images

# see detected results

import glob

from IPython.display import Image, display

for image_path in glob.glob(f'{HOME}/yolov9/runs/detect/exp/*.jpg')[5:8]:
      display(Image(filename=image_path, width=600))

# see how model perfoem top of the video
# change the confident level based on your detection. to see all the plates set it 0.1
# upload your video into yolov9 folder and run detect.py file top of the video
# first video convert into frames then detect and again convert into a video

!python detect.py --conf 0.1 --device 0 --weights {HOME}/yolov9/runs/train/exp/weights/best.pt --source car.mp4

# Detectin is done, lets extrac the charators from the detection with EasyOCR

!pip install easyocr

# to extract the detections, need to change the detect.py with some function using easyocr and cv2
# create the function and call it end of the detection
# calling the new function, just below it called annotator wchich do show the extracted number top of the detection bounding box
# create file with updates and put inside yolov9 folder

!python anpr.py --conf 0.1 --device 0 --weights {HOME}/yolov9/runs/train/exp/weights/best.pt --source car.mp4

